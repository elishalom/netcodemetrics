<?xml version="1.0" encoding="utf-8"?>
<doc>
	<assembly>
		<name>Microsoft.VisualStudio.TextManager.Interop.8.0</name>
	</assembly>
	<members>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA">
			<summary>Specifies a type of color value: foreground, background, or line color.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA.CD_BACKGROUND">
			<summary>Specifies the background color.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA.CD_FOREGROUND">
			<summary>Specifies the foreground color.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA.CD_LINECOLOR">
			<summary>Specifies the line color (used when the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiColorItem"></see> interface is implemented on the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType"></see> interface).</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2">
			<summary>Provides additional members for <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2.FR_BlockThread">
			<summary>Blocks the thread when doing a search</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2.FR_RegExprLineBreaks">
			<summary>Match line breaks using regular expressions</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT2">
			<summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT2.VSFR_CancelledBeforeReplacementsMade">
			<summary>Replace operation was cancelled before any replacement were made.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT2.VSFR_ReplaceIncompleteEOL">
			<summary>User tried to replace only the CR of the LF of a line with a CR-LF ending.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID2">
			<summary>Provides additional members for the VSFTPROPID enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID2.VSFTPROPID_IsFindInFilesForegroundOnly">
			<summary>VT_BOOL; Document is foreground only.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode">
			<summary>Specifies the buffer coordinator mapping mode for contained languages.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_ENTIREBUFFER">
			<summary>Indicates that the buffer is a single span, so no markers are required. This is a special mode since if one creates a marker to track the entire buffer, the marker will be deleted when the user deletes the contents of the entire buffer and therefore all subsequent marker events are lost. There is no way to create a marker that is wider than the buffer. This mode supersedes any other bit flags set.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDED">
			<summary>A combination of <see cref="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDLEFT"></see> and <see cref="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDRIGHT"></see>.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDLEFT">
			<summary>Indicates the primary span actually has an additional character at the beginning, but only the characters after that additional character are replicated to the secondary span. This mode is used to prevent deletion of text markers when one of the spans collapses into 0 characters, that is, if the user deletes everything in the span range. For example, when the user deletes everything in a script block. In the extended left mode, the primary span includes the '&gt;' from the opening tag &lt;script&gt;. Normally this mode should be changed only when there are no mappings. If the mapping mode is changed when the buffer coordinator already has span mappings, the result is unpredictable.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDRIGHT">
			<summary>Indicates the primary span actually has an additional character at the end, but only the characters before that additional character are replicated to the secondary span. This mode is used to prevent deletion of text markers when one of the spans collapses into 0 characters, that is, if the user deletes everything in the span range. For example, when the user deletes everything in a script block. In extended right mode, the primary span includes the '&lt;' from the closing tag &lt;/script&gt;. Normally this mode should be changed only when there are no mappings. If the mapping mode is changed when the buffer coordinator already has span mappings, the result is unpredictable.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_NORMAL">
			<summary>Indicates the default mode where the primary span equals the secondary span.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags.CWB_DEFAULT">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags.CWB_DISABLEDROPDOWNBAR">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags.CWB_DISABLESPLITTER">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2.eolUNI_NEL">
			<summary>UNICODE end of line. This value is also defined as <see cref="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.MAX_EOLTYPES"></see></summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2.MAX_EOLTYPES2">
			<summary>End of enum marker.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType">
			<summary>Specifies the type of an expansion function.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType.eft_List">
			<summary>The expansion function represents a list of values. This list is typically displayed in an IntelliSense completion list.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType.eft_Value">
			<summary>The expansion function represents a single value.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken">
			<summary>Specifies an expansion path typically associated with code snippet locations.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken.ET_InstallRoot">
			<summary>The installation root for Visual Studio. For example, "C:\Program Files\Microsoft Visual Studio 8".</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken.ET_MyDocs">
			<summary>The user's document folder where Visual Studio stores user-specific settings. For example, "C:\Documents and Settings\[username]\My Documents\Visual Studio 2005". Code snippets would then appear under that path in "Code Snippets\[languageName]\My Code Snippets", where [languageName] is a language name such as "C#".</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags">
			<summary>Enumerations for handling matching brace highlighting.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags.HMB_USERECTANGLEBRACES">
			<summary>Use rectangles instead of bold to highlight matching braces.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE">
			<summary>Specifies view frame type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE.vftAny">
			<summary>View frame type not specified.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE.vftCodeWindow">
			<summary>View frame is a code window.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE.vftToolWindow">
			<summary>View frame is a tool window.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags">
			<summary>AtomicTextProvider flags</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags.atpDefault">
			<summary>Provides no text attributes or glyph drawing</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags.atpGlyph">
			<summary>Draws a glyph</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags.atpTextAttributes">
			<summary>Provides text attributes</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection">
			<summary>Use to specify the buffer coordinator replication direction for contained languages.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection.BCRD_PRIMARY_TO_SECONDARY">
			<summary>Specifies the direction is from the primary to the secondary buffer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection.BCRD_SECONDARY_TO_PRIMARY">
			<summary>Specifies the direction is from the secondary to the primary buffer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags2.CCG_REFORMAT">
			<summary> </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE">
			<summary>Used to specify the type of code members that are to be returned from a list of code members.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE.CODEMEMBERTYPE_EVENT_HANDLERS">
			<summary>Specifies an event handler type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE.CODEMEMBERTYPE_EVENTS">
			<summary>Specifies an event type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE.CODEMEMBERTYPE_USER_FUNCTIONS">
			<summary>Specifies a user function type.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK">
			<summary>Language Common Block Query Flags.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode">
			<summary>Used to specify the recompilation mode for a contained language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode.CLRM_COMPILEFILE">
			<summary>Specifies to recompile the file - used when the primary editor replaces the entire buffer and wants a full recompile.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode.CLRM_COMPILEPROJECT">
			<summary>Specifies to recompile the entire project, for example, when the compiler options have changed.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType">
			<summary>Used to specify the type of element is being renamed in a contained language.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_CLASS">
			<summary>Specifies the rename type is a class.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_CLASSMEMBER">
			<summary>Specifies the rename type is a class member.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_NAMESPACE">
			<summary>Specifies the rename type is a namespace.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_OTHER">
			<summary>Specifies the rename type is something other than a class, class member, or namespace.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.ExternalError">
			<summary>Used to create a new external error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.bstrFileName">
			<summary>File name of the file containing the error.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.bstrText">
			<summary>Error text.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.fError">
			<summary>Nonzero for error, zero for warning.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.iCol">
			<summary>Error column number.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.iErrorID">
			<summary>Error ID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.iLine">
			<summary>Error line number.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2">
			<summary>Specifies color table preferences to be used when painting text or markers.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.hBoldViewFont">
			<summary>Bold fonts that are used by text views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.hRegularViewFont">
			<summary>Regular fonts that are used by text views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pColorTable">
			<summary>COM pointer to the color table for the colorable item provider indicated by *pguidColorService. This object is created as a result of this call if it has not been created already. This pointer is guaranteed to be valid if the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES"></see> structure is an [in] parameter to a function. If you want to hold onto it beyond that you must AddRef (and later Release) it.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pguidColorCategory">
			<summary>GUID of the category to be used for the editor's color settings. The editor can handle separate categories for fonts and colors.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pguidColorService">
			<summary>CLSID of an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems"></see> implementor. </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pguidFontCategory">
			<summary>GUID of the category to be used for the editor's font settings. The editor can handle separate categories for fonts and colors.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2">
			<summary>Provides frame settings that control whether scroll bars are provided for views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2.fHorzScrollbar">
			<summary>Determines whether the frame should display a horizontal scroll bar for views.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2.fVertScrollbar">
			<summary>Determines whether the frame should display a vertical scroll bar for views.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR2">
			<summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR2.hrbClientDrawn">
			<summary>Client will draw the collapsed region banner, only valid for collapsed regions.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR2.hrbNoUserControls">
			<summary>User controls (+/- glyph and banner dbl-click) will be disabled, only valid for collapsed regions.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags">
			<summary>Specifies IntelliSense host flags.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_FORCECOMMITTOCONTEXT">
			<summary>Indicates that the context text can be committed to a read-only buffer.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_NOSEPARATESUBJECT">
			<summary>Indicates that there is no subject and the context buffer contains the IntelliSense target. This flag implies that the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_READONLYCONTEXT"></see> is not specified.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_OVERTYPE">
			<summary>Indicates that any editing (in the subject or context fields) should be done in the overwrite mode (otherwise, editing is done in the insert mode).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_READONLYCONTEXT">
			<summary>Indicates the context buffer is read-only.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_SINGLELINESUBJECT">
			<summary>Indicates the subject text must be displayed on a single line.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IPersistFileCheckSum">
			<summary>Calculates the check sum for the file representation of the associated text buffer.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IPersistFileCheckSum.CalculateCheckSum(System.Guid@,System.UInt32,System.Byte[],System.UInt32@)">
			<summary>Calculates the check sum for the file representation of the associated text buffer using the specified algorithm.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbHash">[out] Buffer into which the checksum is written</param>
			<param name="guidCheckSumAlgorithm">[in] GUID representing the algorithm to use</param>
			<param name="pcbActualSize">[out] Buffer size required</param>
			<param name="cbBufferSize">[in] Buffer size passed in</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider.DrawAtomGlyph(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pRect">[in] </param>
			<param name="dwFlags">[in] Unused</param>
			<param name="hdc">[in] </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider.GetAtomFlags(System.UInt32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pdwFlags">[out] </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider.GetAtomGlyphWidth(System.Int32,System.Int32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pGlyphPix">[out] </param>
			<param name="iPixSpaceWidth">[in] </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAutoOutliningClient.QueryWaitForAutoOutliningCallback(System.Int32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fWait">[out] </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodePageSelection.ShowEncodingDialog(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsUserData)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pUserData">[in]</param>
			<param name="pszFileName">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEx.Initialize(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE,System.String,System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])">
			<param name="usageAuxUserContext"> </param>
			<param name="szValueAuxUserContext"> </param>
			<param name="InitViewFlags"> </param>
			<param name="grfCodeWindowBehaviorFlags"> </param>
			<param name="pInitView"> </param>
			<param name="szNameAuxUserContext"> </param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer2">
			<summary>Extends a language services colorizer by allowing the environment to suspend and restart colorization.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer2.BeginColorization">
			<summary>Starts or resume colorization operations.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer2.EndColorization">
			<summary>Suspends or ends colorization operations.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderDescriptionText(System.Int32,System.String@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbstrDescription">[out]</param>
			<param name="iIndex">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderDisplayText(System.Int32,System.String@,System.Int32[])">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="piGlyph">[out]</param>
			<param name="ppszText">[in]</param>
			<param name="iIndex">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderImageList(System.IntPtr@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="phImages">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderItemColor(System.Int32,System.UInt32@,System.UInt32@)">
			<summary>Returns the foreground/background color.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="dwFGColor">[out]</param>
			<param name="dwBGColor">[out]</param>
			<param name="iIndex">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.OnBuilderCommit(System.Int32)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iIndex">[in]</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx">
			<summary>Allows a completion set to provide various kinds of customization.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.CompareItems(System.String,System.String,System.Int32,System.Int32@)">
			<summary>Compares two completor items.</summary>
			<returns>If the method is successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code (in which case the default comparison is used).</returns>
			<param name="plResult">[out] Result of comparison.</param>
			<param name="lCharactersToCompare">[in] Number of characters to compare.</param>
			<param name="bstrOther">[in] Second string to compare to first string.</param>
			<param name="bstrSoFar">[in] First string to compare to.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.DecreaseFilterLevel(System.Int32)">
			<summary>Show in the completion list all common items available.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iSelectedItem">[in] The item of interest.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.GetCompletionItemColor(System.Int32,System.UInt32@,System.UInt32@)">
			<summary>Returns the foreground and background colors for a selected item.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="dwFGColor">[out] Foreground color. For values, see COLORREF.</param>
			<param name="dwBGColor">[out] Background color. For values, see COLORREF.</param>
			<param name="iIndex">[in] <see cref="T:Microsoft.VisualStudio.Package.CompletionSet"></see> item of interest.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.GetFilterLevel(System.Int32@)">
			<summary>Returns the current filter level.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If there is no filter, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see>; otherwise, returns an error code.</returns>
			<param name="iFilterLevel">[out] Returns the current filter level.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.IncreaseFilterLevel(System.Int32)">
			<summary>Show in the completion list the members of the specified type.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iSelectedItem">[in] The index of the item of interest.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedCode">
			<summary>Implemented by a language to support buffer span mapping.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedCode.EnumOriginalCodeBlocks(Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks@)">
			<summary>Returns an enumerator of original code block mappings.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppEnum">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks"></see> object that contains a list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie"></see> objects representing all embedded code blocks in the original document.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedCode.HostSpansUpdated">
			<summary>Notifies the provider of the code spans that the buffer coordinator has been updated with new spans.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage">
			<summary>Provides simplistic contained language service features.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsColorizer@)">
			<summary>Returns a colorizer object for the language.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppColorizer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer"></see> object representing the colorizer to use for the contained language.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.GetLanguageServiceID(System.Guid@)">
			<summary>Returns the GUID for the full language service of the contained language.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pguidLangService">[out] Returns the GUID of the language service of the contained language.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.GetTextViewFilter(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter@)">
			<summary>Returns a text view filter to handle delegated text view filtering responsibility.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pNextCmdTarget">[in] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget"></see> object representing the command target to pass any unhandled commands to.</param>
			<param name="pTextViewFilter">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter"></see> object representing the text view filter that is used by the contained language service to receive any commands passed to the text view.</param>
			<param name="pISenseHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost"></see> object representing the IntelliSense host.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.Refresh(System.UInt32)">
			<summary>Recompiles the language file, or the entire project.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="dwRefreshMode">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode"></see> enumeration indicating what should be recompiled (the file or the whole project).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.SetBufferCoordinator(Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator)">
			<summary>Allows for a change in buffer coordinators on-the-fly.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pBC">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator"></see> object representing the new buffer coordinator.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.SetHost(Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost)">
			<summary>Sets the language host for the secondary language.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost"></see> object representing the new language host. Can be a null value (see Remarks for details).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.WaitForReadyState">
			<summary>Called to ensure the contained language is ready.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport">
			<summary>Provides support for code navigation, event generation, and the like.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.CreateUniqueEventName(System.String,System.String,System.String,System.String@)">
			<summary>Creates a unique event handler name, given the class context, name of the object instance, and the name of event.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pszObjectName">[in] Name of the object.</param>
			<param name="pszNameOfEvent">[in] Name of the event.</param>
			<param name="pszClassName">[in] Name of the class.</param>
			<param name="pbstrEventHandlerName">[out] Returns the new name of an event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.EnsureEventHandler(System.String,System.String,System.String,System.String,System.UInt32,System.String@,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Creates an event handler given the class context, name of the object instance, name of the event, and the (unique) name of event handler, if none exists already.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pSpanInsertionPoint">[out] Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the location in the source code where the event handler was inserted.</param>
			<param name="pszObjectTypeName">[in] Name of the object.</param>
			<param name="itemidInsertionPoint">[in] The file or buffer where the designer would like to put a new method. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION"></see>.</param>
			<param name="pszEventHandlerName">[in] Name of the event handler.</param>
			<param name="pszNameOfEvent">[in] Name of the event.</param>
			<param name="pbstrUniqueMemberID">[out] Returns a unique member ID for the event handler.</param>
			<param name="pszClassName">[in] Name of the class.</param>
			<param name="pbstrEventBody">[out] Returns the returned event handler body.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetBaseClassName(System.String,System.String@)">
			<summary>Returns the base class name for the provided class.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pszClassName">[in] The full name of the class, for example, Namespace1.Namespace2.Class1.</param>
			<param name="pbstrBaseClassName">[out] The full name of the base class, for example, System.Web.UI.Page.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetCompatibleEventHandlers(System.String,System.String,System.String,System.Int32@,System.IntPtr@,System.IntPtr@)">
			<summary>Returns a collection of existing members that match the signature of the provided event description.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pcMembers">[out] Returns the number of members in the ppbstrEventHandlerNames and ppbstrMemberIDs arrays.</param>
			<param name="ppbstrMemberIDs">[out] Returns an array of unique member IDs for each event handler.</param>
			<param name="pszObjectTypeName">[in] The object type name for the event.</param>
			<param name="pszNameOfEvent">[in] The name of the event for which to get the event handlers.</param>
			<param name="pszClassName">[in] The full name of the class from which to get the event handlers.</param>
			<param name="ppbstrEventHandlerNames">[out] Returns an array of event handler names.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetEventHandlerMemberID(System.String,System.String,System.String,System.String,System.String@)">
			<summary>Returns the unique member id of an event handler matching the provided description if exists.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If the event handler does not exist, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see>. Otherwise, returns an error code.</returns>
			<param name="pszObjectTypeName">[in] The object type of the event.</param>
			<param name="pszEventHandlerName">[in] The name of the event handler.</param>
			<param name="pszNameOfEvent">[in] The name of the event.</param>
			<param name="pbstrUniqueMemberID">[out] Returns the unique member ID for the event handler.</param>
			<param name="pszClassName">[in] The full class name that contains the event handler.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetMemberNavigationPoint(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
			<summary>Obtains the position (for example the starting character index, starting line, ending character index, ending line, and item ID of file) in the secondary buffer coordinates or partial class file buffer coordinates, of a given a class member, that could be cached and later used to navigate to that member.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pszUniqueMemberID">[in] Unique member identifier (as might be returned from the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetEventHandlerMemberID(System.String,System.String,System.String,System.String,System.String@)"></see> method).</param>
			<param name="pSpanNavPoint">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is filled in with the position in the secondary buffer of the specified member.</param>
			<param name="pszClassName">[in] Name of the class.</param>
			<param name="pItemID">[out] Returns the item ID of the parent document. This is a unique identifier or one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetMembers(System.String,System.UInt32,System.Int32@,System.IntPtr@,System.IntPtr@)">
			<summary>Returns a collection of members corresponding to the specified flags.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pcMembers">[out] Returns the number of members specified in the returned ppbstrDisplayNames and ppbstrMemberIDs arrays.</param>
			<param name="ppbstrMemberIDs">[out] Returns a list of unique member identifier strings for each member.</param>
			<param name="dwFlags">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE"></see> enumeration specifying the types of members to retrieve.</param>
			<param name="pszClassName">[in] Class name.</param>
			<param name="ppbstrDisplayNames">[out] Returns a list of display names for each member.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.IsValidID(System.String,System.Boolean@)">
			<summary>Examines the provided ID to see if it is a valid identifier for the contained language.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pfIsValidID">[out] Returns nonzero (TRUE) indicating the ID is valid; otherwise, returns zero (FALSE). (C++ only: this value is returned as a VARIANT_BOOL object.)</param>
			<param name="bstrID">[in] An identifier of the contained language.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.OnRenamed(Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType,System.String,System.String)">
			<summary>Called from a containing <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost"></see> object indicating that a rename of a specified type was initiated.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="bstrOldID">[in] The old name.</param>
			<param name="clrt">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType"></see> enumeration specifying what is being renamed.</param>
			<param name="bstrNewID">[in] The new name.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageColorizer">
			<summary>Provides colorization for line fragments.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageFactory">
			<summary>Provides creation of contained languages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageFactory.GetLanguage(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator,Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage@)">
			<summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage"></see> object that a primary language can use to delegate certain responsibilities for managing a contained language.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="itemid">[in] A unique identifier for a source file or one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see>, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION"></see>.</param>
			<param name="ppLanguage">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage"></see> object representing the contained language for the specified hierarchy item.</param>
			<param name="pBufferCoordinator">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator"></see> object representing the buffer coordinator to associate with the contained language.</param>
			<param name="pHierarchy">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object representing the hierarchy to which this object belongs.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost">
			<summary>Represents a host for contained languages.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Advise(Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents,System.UInt32@)">
			<summary>Enables a client to receive messages from the source text.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pvsCookie">[out] Returns a unique identifier representing the client. This value can later be used in a call to the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Unadvise(System.UInt32)"></see> method.</param>
			<param name="pHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents"></see> object representing the entity that is requesting notification of contained language events generated by the editor.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.CanReformatCode(System.Int32@)">
			<summary>Determines if code reformatting is currently allowed.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pfCanReformat">[out] Returns nonzero (TRUE) if the code can be reformatted; otherwise, returns zero (FALSE).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.EnsureSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
			<summary>Ensures that span in the primary buffer is visible.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="tsPrimary">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the span of text to make visible.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetErrorProviderInformation(System.String@,System.Guid@)">
			<summary>Retrieves information about the error provider.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pguidTaskProviderGuid">[out] A GUID identifying the task provider.</param>
			<param name="pbstrTaskProviderName">[out] Name of the task provider.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetLineIndent(System.Int32,System.String@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
			<summary>Provides information on the base indent level and indent settings.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="plIndentSize">[out] Size of the indent.</param>
			<param name="pbstrIndentString">[out] Returns the exact indent string. This string is to be inserted at the beginning of each line that is reformatted and represents the base level of indentation. See Remarks for more information.</param>
			<param name="pfTabs">[out] Returns nonzero (TRUE) if tabs are to be used for line indents; otherwise, returns zero (FALSE), use spaces instead.</param>
			<param name="plTabSize">[out] Size of the tab indent, if present. If the pfTabs parameter returns zero (FALSE), this value is unspecified.</param>
			<param name="plParentIndentLevel">[out] Returns the indent level in spaces. This value should be ignored if the pbstrIndentString parameter returns a non-empty string.</param>
			<param name="lLineNumber">[in] The line number for the line of text in question. This is the line number in the secondary buffer (that is, it is typically relative to the first line of code).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetNearestVisibleToken(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Returns the language token that is nearest the requested line.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="tsSecondaryToken">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the position and extent of the token to search near. This position is based on the secondary buffer.</param>
			<param name="ptsPrimaryToken">[out] Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing the position and extent of the token that is nearest the specified token. The position is based on the primary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetVSHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
			<summary>Returns the hierarchy that contains the file displayed in the primary buffer.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppVsHierarchy">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy"></see> object representing the hierarchy that owns the file displayed in the primary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.InsertControl(System.String,System.String)">
			<summary>Sends a request to insert markup.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pwcID">[in] A string containing the ID of the object. See Remarks for an example.</param>
			<param name="pwcFullType">[in] The fully qualified type name of the object for which the markup is to be inserted. For example, "System.Web.UI.Page".</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.InsertImportsDirective(System.UInt16@)">
			<summary>Inserts a markup tag that imports the specified namespace.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pwcImportP">[in] A string specifying the fully qualified namespace to import.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.InsertReference(System.UInt16@)">
			<summary>Adds an assembly that is currently in the global assembly cache (GAC).</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pwcReferenceP">[in] A string defining the reference to be added. See Remarks for an example.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.OnContainedLanguageEditorSettingsChange">
			<summary>Called to notify the host when the contained language changes its Fonts and Colors settings.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.OnRenamed(Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType,System.String,System.String)">
			<summary>Called to notify the editor that a name has been changed.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="bstrOldID">[in] The fully qualified old name. For example, "MyNamespace.MyClass.MyMethod".</param>
			<param name="clrt">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType"></see> enumeration indicating what type of name was changed.</param>
			<param name="bstrNewID">[in] The fully qualified new name. For example, "MyNamespace.MyClass.MyNewMethod".</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.QueryEditFile">
			<summary>Determines if the secondary buffer can be modified.</summary>
			<returns>If the buffer can be modified, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns BUFFER_E_SCC_READONLY.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Unadvise(System.UInt32)">
			<summary>Called by a client that is no longer interested in receiving notifications from the editor.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="vsCookie">[in] The unique value that was returned from the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Advise(Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents,System.UInt32@)"></see> method.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents">
			<summary>Receives view change notifications from a contained language host.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents.OnViewChange(System.Int32)">
			<summary>Called when the view has changed.</summary>
			<returns>Should always return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see> (the return value is typically ignored by the contained language host).</returns>
			<param name="fTextView">[in] Nonzero (TRUE) if the view is text-based; otherwise, zero (FALSE), the view is graphical (typically a designer window).</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding">
			<summary>Provides support for static event generation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.AddStaticEventBinding(System.String,System.String,System.String,System.String)">
			<summary>Binds a static event to the specified member.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pszObjectName">[in] The name of the object that contains the event.</param>
			<param name="pszUniqueMemberID">[in] The unique ID of the member that is to handle the event.</param>
			<param name="pszNameOfEvent">[in] The name of the event.</param>
			<param name="pszClassName">[in] The fully qualified name of the class the member resides in.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.EnsureStaticEventHandler(System.String,System.String,System.String,System.String,System.String,System.UInt32,System.String@,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Creates an event handler given the class context, name of the object type and instance, the name of the event and the (unique) name of the event handler.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pSpanInsertionPoint">[in, out] Fills in a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object with the position where the event handler body was inserted in the primary buffer. This insertion point is in the file specified by the itemidInsertionPoint parameter. This is valid only if the event handler did not already exist.</param>
			<param name="pszObjectTypeName">[in] The fully qualified name of the object type.</param>
			<param name="pszObjectName">[in] The name of the object.</param>
			<param name="pszEventHandlerName">[in] The name of the event handler.</param>
			<param name="pszNameOfEvent">[in] The name of the event.</param>
			<param name="pbstrUniqueMemberID">[out] Returns a string containing the member ID of the event. Returns a null value if the event handler already exists.</param>
			<param name="itemidInsertionPoint">[in] The file to insert into. This is a unique hierarchy identifier or one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL"></see>, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT"></see> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION"></see>.</param>
			<param name="pszClassName">[in] The fully qualified name of the class.</param>
			<param name="pbstrEventBody">[out] Returns a string containing the body of the event handler. Returns a null value if the event handler already exists.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.GetStaticEventBindingsForObject(System.String,System.String,System.Int32@,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
			<summary>Returns a collection of events that are statically handled.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pcMembers">[out] Returns the number of event handlers specified in the lists returned in the ppbstrEventNames, ppbstrDisplayNames, and ppbstrMemberIDs parameters.</param>
			<param name="ppbstrMemberIDs">[out] Returns a list containing the event member IDs.</param>
			<param name="pszObjectName">[in] The fully qualified name of the object that contains the event.</param>
			<param name="pszClassName">[in] The fully qualified name of the class.</param>
			<param name="ppbstrEventNames">[out] Returns a list containing the event handler names.</param>
			<param name="ppbstrDisplayNames">[out] Returns a list containing the display names for the event handlers.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.RemoveStaticEventBinding(System.String,System.String,System.String,System.String)">
			<summary>Removes the event binding from the specified member.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pszObjectName">[in] The name of the object that contains the event.</param>
			<param name="pszUniqueMemberID">[in] The unique ID of the member that handles the event.</param>
			<param name="pszNameOfEvent">[in] The name of the event.</param>
			<param name="pszClassName">[in] The fully qualified name of the class the member resides in.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClientEx">
			<summary>Provides additional drop-down bar client functionality.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClientEx.GetEntryIndent(System.Int32,System.Int32,System.UInt32@)">
			<summary>Returns the indent level for a particular drop-down bar/Window combo item.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pIndent">[out] Indent level of iIndex item.</param>
			<param name="iCombo">[in] The drop-down bar/Window combo.</param>
			<param name="iIndex">[in] Index of the item of interest.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans">
			<summary>Represents a list of text span mappings between two buffers.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans@)">
			<summary>Returns a copy of the current enumeration as a separate object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppEnum">[out] Returns a copy of this enumeration as a separate object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping[],System.UInt32@)">
			<summary>Returns the next set of elements from the enumeration.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if fewer than the requested number of elements could be returned. Otherwise, returns an error code.</returns>
			<param name="celt">[in] The number of elements to retrieve. Also specifies the maximum size of the rgelt array.</param>
			<param name="rgelt">[in, out] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping"></see> objects to be filled in.</param>
			<param name="pceltFetched">[out] Returns the number of elements actually returned in the rgelt array.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Reset">
			<summary>Resets the enumeration to the first element.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Skip(System.UInt32)">
			<summary>Skips over the specified number of elements.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if the celt parameter is greater than the number of remaining elements. Otherwise, returns an error code.</returns>
			<param name="celt">[in] Number of elements to skip.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks">
			<summary>Represents a list of spans of code blocks.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks@)">
			<summary>Returns a copy of the current enumeration as a separate object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppEnum">[out] Returns a copy of this enumeration as a separate object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie[],System.UInt32@)">
			<summary>Returns the next set of elements from the enumeration.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if fewer than the requested number of elements could be returned. Otherwise, returns an error code.</returns>
			<param name="celt">[in] The number of elements to retrieve. Also specifies the maximum size of the rgelt array.</param>
			<param name="rgelt">[in, out] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie"></see> objects to be filled in.</param>
			<param name="pceltFetched">[out] Returns the number of elements actually returned in the rgelt array.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Reset">
			<summary>Resets the enumeration to the first element.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Skip(System.UInt32)">
			<summary>Skips over the specified number of elements.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if the celt parameter is greater than the number of remaining elements. Otherwise, returns an error code.</returns>
			<param name="celt">[in] Number of elements to skip.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors">
			<summary>Represents a list of external errors.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors@)">
			<summary>Returns a copy of the current enumeration as a separate object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppErrors">[out] Returns a copy of this enumeration as a separate object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.ExternalError[],System.UInt32@)">
			<summary>Returns the next set of elements from the enumeration.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if fewer than the requested number of elements could be returned. Otherwise, returns an error code.</returns>
			<param name="celt">[in] The number of elements to retrieve. Also specifies the maximum size of the rgelt array.</param>
			<param name="rgelt">[in, out] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ExternalError"></see> objects to be filled in.</param>
			<param name="pceltFetched">[out] Returns the number of elements actually returned in the rgelt array.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Reset">
			<summary>Resets the enumeration to the first element.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Skip(System.UInt32)">
			<summary>Skips over the specified number of elements.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE"></see> if the celt parameter is greater than the number of remaining elements. Otherwise, returns an error code.</returns>
			<param name="celts">[in] Number of elements to skip.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion">
			<summary>Provides a way to insert code snippets into a text buffer.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient">
			<summary>Allows a VSPackage to participate in the code snippet insertion process.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.EndExpansion">
			<summary>Called to signal the end of the code snippet insertion and editing phase.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.GetExpansionFunction(MSXML.IXMLDOMNode,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction@)">
			<summary>Called to obtain an expansion function for the specified code snippet.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="xmlFunctionNode">[in] An IXMLDOMNode object that contains the code snippet expansion function definition. </param>
			<param name="pFunc">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction"></see> object representing the expansion function to use.</param>
			<param name="bstrFieldName">[in] A string containing the name of the default field (the code snippet field that is first highlighted after the code snippet is inserted).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.OnAfterInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
			<summary>Called after the code snippet has been inserted and formatted.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pSession">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession"></see> object containing information about the code snippet that has just been inserted. This can be a null value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
			<summary>Called before the code snippet has been inserted.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pSession">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession"></see> object containing information about the code snippet that is about to be inserted. This can be a null value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.OnItemChosen(System.String,System.String)">
			<summary>Called when a code snippet name has been selected from an IntelliSense menu.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pszTitle">[in] A string containing the full name of the code snippet.</param>
			<param name="pszPath">[in] A string containing the full path to the snippet file.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration">
			<summary>Represents a list of code snippets for a particular language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration.GetCount(System.UInt32@)">
			<summary>Returns the number of objects represented in this enumeration.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pCount">[out] Returns the number of objects.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration.Next(System.UInt32,System.IntPtr[],System.UInt32@)">
			<summary>Returns the specified number of objects from the enumeration.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="celt">[in] The number of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansion"></see> objects to retrieve.</param>
			<param name="rgelt">[out] An array that is filled in with the requested <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansion"></see> objects.</param>
			<param name="pceltFetched">[out] The actual number of objects retrieved.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration.Reset">
			<summary>Resets the enumeration to the beginning.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEvents">
			<summary>Represents a connection point that receives event notifications having to do with code snippets.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEvents.OnAfterSnippetsKeyBindingChange(System.UInt32,System.UInt32,System.Int32)">
			<summary>Called when there is a change in the key binding that is associated with inserting code snippets.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="dwCmdGuid">[in] The GUID of the command group being bound to.</param>
			<param name="fBound">[in] Non-zero (TRUE) if the command is being bound; otherwise, zero (FALSE) if the binding is being removed.</param>
			<param name="dwCmdId">[in] The ID of the command in the command group being bound to.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEvents.OnAfterSnippetsUpdate">
			<summary>Called whenever a folder that contains snippets has been updated and the snippets from that folder have been read in.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction">
			<summary>Represents an expansion function in a code snippet.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.FieldChanged(System.String,System.Int32@)">
			<summary>Called when another field in the inserted code snippet is changed.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fRequeryFunction">[out] Returns non-zero (true) if this expansion function's value has been changed and needs to be obtained again; otherwise, returns zero (false).</param>
			<param name="bstrField">[in] Name of the field that changed.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetCurrentValue(System.String@,System.Int32@)">
			<summary>Returns the current value of the expansion function.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="bstrValue">[out] Returns a string containing the value of the expansion function.</param>
			<param name="fHasCurrentValue">[out] Returns non-zero (true) if the expansion function has a current value; otherwise, returns zero (true). See Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetDefaultValue(System.String@,System.Int32@)">
			<summary>Returns the default string to be inserted before any template editing occurs.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fHasDefaultValue">[out] Returns non-zero (true) if the expansion function has a default value; otherwise, returns zero (false). See Remarks.</param>
			<param name="bstrValue">[out] Returns a string that contains the default value.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetFunctionType(System.UInt32@)">
			<summary>Returns the type of this expansion function (value or list of values).</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pFuncType">[out] Returns a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType"></see> enumeration identifying the type of this expansion function.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetListCount(System.Int32@)">
			<summary>Returns the number of items in the list of values associated with the expansion function.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iCount">[out] Returns the number of values represented by this expansion function.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetListText(System.Int32,System.String@)">
			<summary>Returns the specified value from a list of values associated with the expansion function.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="ppszText">[out] Returns a string containing the requested value.</param>
			<param name="iIndex">[in] The index of the value to retrieve.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.ReleaseFunction">
			<summary>Called when the expansion function is no longer needed.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost">
			<summary>Provides Insert Expansion support.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetCurrentLevel(System.Int32@)">
			<summary>Returns the current position.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="pLevel">[out] The current position.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetSelection(System.Int32@,System.Int32@)">
			<summary>Retrieves the starting and ending positions of the current expansion selection.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iStart">[out] The start position of the expansion text span.</param>
			<param name="iEnd">[out] The end position of the expansion text span.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetText(System.String@)">
			<summary>Returns the text of the expansion text span.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="bstrText">[out] String containing the expansion text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetTextLen(System.Int32@)">
			<summary>Returns the length of the expansion text span.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iLen">[out] The length of the expansion text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.SetSelection(System.Int32,System.Int32)">
			<summary>Sets the starting and ending position of an expansion text span selection.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iStart">[in] The start position of the expansion text span.</param>
			<param name="iEnd">[in] The end position of the expansion text span.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.SetText(System.String,System.Int32)">
			<summary>Replaces the text span within an expansion selection with new text.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="fReplaceAll">[in] If fReplaceAll is true, <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.SetText(System.String,System.Int32)"></see> replaces all text in the buffer (including prefix text). Otherwise, <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.SetText(System.String,System.Int32)"></see> replaces anything within the selection or insert at the selection location if there is a zero-length selection.</param>
			<param name="bstrText">[in] A string containing the new text.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager">
			<summary>Represents the expansion manager, which knows how to find and display lists of code snippets for a particular coding language.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.EnumerateExpansions(System.Guid,System.Int32,System.String[],System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration@)">
			<summary>Retrieves a list of code snippets for the specified coding language.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="guidLang">[in] The GUID of the coding language (typically, this is the language service GUID).</param>
			<param name="iCountTypes">[in] The number of types specified in the bstrTypes array. If this is 0, all types are returned.</param>
			<param name="bstrTypes">[in] An array strings specifying snippet types to obtain. This can be a null value if iCountTypes is 0. See Remarks.</param>
			<param name="fShortCutOnly">[in] Non-zero (TRUE) if to retrieve only the shortcut name for each snippet; otherwise, zero (FALSE) to retrieve all information.</param>
			<param name="fIncludeNULLType">[in] Non-zero (TRUE) if to include code snippets with "empty" types in the bstrTypes list (this parameter is ignored if iCountTypes is 0).</param>
			<param name="fIncludeDuplicates">[in] Non-zero (TRUE) if to include duplicate snippets; otherwise, duplicates are left out.</param>
			<param name="pEnum">[out] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration"></see> object that contains the desired list of snippets.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.GetSnippetShortCutKeybindingState(System.Int32@)">
			<summary>Determines if a key has been bound to the "Invoke Snippet From Shortcut" command.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fBound">[out] Returns non-zero (TRUE) if a key has been bound; otherwise, returns zero (FALSE).</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.GetTokenPath(System.UInt32,System.String@)">
			<summary>Returns the path to the specified location.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbstrPath">[out] Returns a string containing the full path to the specified location.</param>
			<param name="token">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken"></see> enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.InvokeInsertionUI(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String[],System.Int32,System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String)">
			<summary>Shows an IntelliSense list of code snippets that can be inserted into the source through the provided <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient"></see> object.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iCountKinds">[in] The number of kinds specified in the bstrKinds array. If this is 0, all kinds are displayed.</param>
			<param name="fIncludeNULLKind">[in] Non-zero (TRUE) if to include code snippets with "empty" kinds in the bstrKinds list (this parameter is ignored if iCountKinds is 0).</param>
			<param name="guidLang">[in] The GUID of the coding language (typically, this is the language service GUID).</param>
			<param name="bstrCompletionChar">[in] A character that, when typed, inserts the currently selected snippet and closes the UI. If this is a null value or an empty string, typing the Enter key is the only way to insert a selected snippet.</param>
			<param name="pView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> object representing the view in which to present the list.</param>
			<param name="bstrTypes">[in] An array strings specifying snippet types to display. This can be a null value if iCountTypes is 0. See Remarks.</param>
			<param name="bstrKinds">[in] An array of strings specifying the snippet kinds to display. This can be a null value if iCountKinds is 0. See Remarks.</param>
			<param name="fIncludeNULLType">[in] Non-zero (TRUE) if to include code snippets with "empty" types in the bstrTypes list (this parameter is ignored if iCountTypes is 0).</param>
			<param name="pClient">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient"></see> object representing the expansion client that is used to complete the insertion of the code snippet.</param>
			<param name="iCountTypes">[in] The number of types specified in the bstrTypes array. If this is 0, all types are displayed.</param>
			<param name="bstrPrefixText">[in] A string containing the text to show in the prompt.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession">
			<summary>Represents the state of a newly inserted code snippet that is being edited by the user.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.EndCurrentExpansion(System.Int32)">
			<summary>Called to indicate the end of the current code snippet insertion process.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fLeaveCaret">[in] Non-zero (TRUE) if to leave the edit caret where it is; otherwise, zero (FALSE) if the edit caret should be positioned according to the code snippet template.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetDeclarationNode(System.String,MSXML.IXMLDOMNode@)">
			<summary>Retrieves the declaration node for the specified field.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pNode">[out] Returns an IXMLDOMNode object representing the field's declaration node.</param>
			<param name="bstrNode">[in] A string containing the name of the field. This can be a null value. See Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetFieldValue(System.String,System.String@)">
			<summary>Retrieves the value of the specified field.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbstrValue">[out] Returns a string containing the value of the field.</param>
			<param name="bstrFieldName">[in] A string containing the name of the field.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetHeaderNode(System.String,MSXML.IXMLDOMNode@)">
			<summary>Returns a node from the code snippet &lt;Header&gt; tag.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pNode">[out] Returns an appendChild object representing the specified tag.</param>
			<param name="bstrNode">[in] A string containing the name of the XML tag to look for. This can be a null value. See Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetSnippetNode(System.String,MSXML.IXMLDOMNode@)">
			<summary>Returns a node from the code snippet &lt;Snippet&gt; tag.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pNode">[out] Returns an appendChild object representing the specified tag.</param>
			<param name="bstrNode">[in] A string containing the name of the XML tag to look for. This can be a null value. See Remarks.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GoToNextExpansionField(System.Int32)">
			<summary>Move the highlight to the next field in order.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fCommitIfLast">[in] Non-zero (TRUE) if to commit all changes to the code snippet if moving off the last field; otherwise, zero (FALSE) if to move to the first field.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GoToPreviousExpansionField">
			<summary>Move the highlight to the previous field in order.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.SetFieldDefault(System.String,System.String)">
			<summary>Sets the default value for the specified field.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="bstrNewValue">[in] A string containing the default value to use.</param>
			<param name="bstrFieldName">[in] A string containing the name of the field.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExternalCompletionSet">
			<summary>Enhances IntelliSense completion set functionality for use in a non-text-view editor.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExternalCompletionSet.SetIntellisenseHost(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost)">
			<summary>Set the IntelliSense host that controls the display of the completion list.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost"></see> object representing the IntelliSense host that displays the completion list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExternalCompletionSet.UpdateCompSet">
			<summary>Updates the completion set.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog">
			<summary>Use the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog"></see> interface to launch a modeless dialog on the background thread that will allow a user to cancel a lengthy background find or find and replace operation.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.CloseDialog">
			<summary>Dismisses a modeless background dialog opened with <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.LaunchDialog"></see>.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.LaunchDialog">
			<summary>Launches a modeless dialog on the background thread with which the user can cancel a lengthy find or replace operation</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code. Repeated calls to <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.LaunchDialog"></see> close and re-launch the dialog rather than generating an error.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.QueryDialog(System.Int32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pfCancel">[out] True if the user has clicked cancel, otherwise false.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget2">
			<summary>Implements Find and Replace capabilities within your editor.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget2.NavigateTo2(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet,Microsoft.VisualStudio.TextManager.Interop.TextSelMode)">
			<summary>Move to a specified location within a document.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iSelMode">[in] Set selection to box or stream. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSelMode"></see>.</param>
			<param name="pSpans">[in] optional - Set of text spans describing the match <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetTaggedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)"></see></param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiColorItem">
			<summary>Provides support for returning a full 24-bit color value.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiColorItem.GetColorData(System.Int32,System.UInt32@)">
			<summary>Retrieves the RGB value for the specified element.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="cdElement">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA"></see> enumeration identifying the element for which to get the color.</param>
			<param name="pcrColor">[out] The requested RGB value.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegionEx">
			<summary>Provides additional methods for <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion"></see>.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClientEx">
			<summary>Supports client drawing of glyphs.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClientEx.DrawBannerGlyph(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<summary>Tells client to draw a glyph</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pRect">[in]</param>
			<param name="pHidReg">[in]</param>
			<param name="dwFlags">[in] Currently unused</param>
			<param name="hdc">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClientEx.GetBannerGlyphWidth(System.Int32,System.Int32@)">
			<summary>Determines how much space to set aside for banner glyph.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pGlyphPix">[out]</param>
			<param name="iPixSpaceWidth">[in]</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSessionEx">
			<summary>Allows adding of regions with "Ex" properties.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSessionEx.AddHiddenRegionsEx(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="ppEnum">[out]</param>
			<param name="cRegions">[in]</param>
			<param name="dwUpdateFlags">[in] Updates flags. For information on values for dwUpdateFlags see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS"></see>.</param>
			<param name="rgHidReg">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsInsertionUI.GetWindowHandle(System.IntPtr@)">
			<param name="hwnd"> </param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor">
			<summary>Used to create and display a completor window</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Exec(System.Guid@,System.UInt32,System.UInt32,System.Object@,System.Object@)">
			<param name="pvaOut"> </param>
			<param name="pvaIn"> </param>
			<param name="nCmdID"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="nCmdexecopt"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.GetCompletionSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Returns the completor span.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="ts"><see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> containing the completor.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.GetHeight(System.UInt32@)">
			<summary>Gets the height of the IntelliSense completor.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwHeight">The height of the completor.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.GetWidth(System.UInt32@)">
			<summary>Gets the completor width.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwWidth">The width of the completor.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Hide">
			<summary>Hides the IntelliSense completor.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost,System.IntPtr)">
			<summary>Initializes the IntelliSense completor.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="hwndParent">Handle to the parent window.</param>
			<param name="pHost">Pointer to IVsIntellisenseHost</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT[])">
			<param name="pCmdText"> </param>
			<param name="prgCmds"> </param>
			<param name="cCmds"> </param>
			<param name="pguidCmdGroup"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.SetLocation(Microsoft.VisualStudio.OLE.Interop.POINT[])">
			<summary>Sets the completor location.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="p">Pointer to the start of the completor location.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Update(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
			<summary>Updates the IntelliSense completor.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwFlags">IntelliSense host flags. Values are taken from IntellisenseHostFlags.</param>
			<param name="pCompSet">Pointer to IVsCompletionSet</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost">
			<summary>Implemented by clients (including IVsTextView) to provide intellisense hosting functionality</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.AfterCompletorCommit">
			<summary>Handles any clean up actions after a call to the completor.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.BeforeCompletorCommit">
			<summary>Handles actions before committing the completor call.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.Exec(System.Guid@,System.UInt32,System.UInt32,System.Object@,System.Object@)">
			<param name="pvaOut"> </param>
			<param name="pvaIn"> </param>
			<param name="nCmdID"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="nCmdexecopt"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
			<summary>Gets the context buffer for IntelliSense.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="ppCtxBuffer">[out, retval] The context buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextCaretPos(System.Int32@,System.Int32@)">
			<summary>Sets the caret position relative to the context buffer.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="piLine">[in] Length of the context buffer.</param>
			<param name="piIndex">[in] Indicates the caret position index.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextFocalPoint(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
			<summary>Returns the position in the context buffer that is considered the starting context point.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="piLen">Length of the buffer.</param>
			<param name="pSpan">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> containing the IntelliSense context.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextLocation(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32@)">
			<summary>Gets bounding rectangle for the IntelliSense context.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="piTopX">Gets bounding rectangle for the IntelliSense context.</param>
			<param name="iLen">Gets bounding rectangle for the IntelliSense context.</param>
			<param name="fUseCaretPosition">Gets bounding rectangle for the IntelliSense context.</param>
			<param name="iPos">Gets bounding rectangle for the IntelliSense context.</param>
			<param name="prc">Gets bounding rectangle for the IntelliSense context.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextSelection(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Gets the selection relative to the context buffer.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="pSelectionSpan">[out] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> interface defining the context selection.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetHostFlags(System.UInt32@)">
			<summary>Gets the IntelliSense host flags from IntellisenseHostFlags enumeration.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="pdwFlags">[out, retval] The IntelliSense host flag from IntellisenseHostFlags enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetHostWindow(System.IntPtr@)">
			<summary>Returns a handle to the host window.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="hwnd">[out] Handle to the host window.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetServiceProvider(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
			<summary>Gets an IntelliSense service object.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="ppSP">[out] Pointer to <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<summary>Returns the smart tag window.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="rcSmartTag">[out] Returns the smart tag rectangle.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSubjectCaretPos(System.Int32@)">
			<summary>Gets the caret position relative to the text upon which IntelliSense operates.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="piIndex">[out] The index of the caret position.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSubjectSelection(System.Int32@,System.Int32@)">
			<summary>Gets the selection relative to the text upon which IntelliSense operates.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="piEndIndex">[out] Ending index of the subject text selection.</param>
			<param name="piAnchorIndex">[out] Starting index of the subject text selection.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSubjectText(System.String@)">
			<summary>Gets the text upon which IntelliSense operates.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="pbstrSubjectText">[out, retval] The string containing the subject text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Highlights the matching brace.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwFlags">[in] Parameter is not used.</param>
			<param name="cSpans">[in] Number of matching pairs to highlight within the text span.</param>
			<param name="rgBaseSpans">[in, size_is(cSpans)] Span of text to highlight within.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT[])">
			<param name="pCmdText"> </param>
			<param name="prgCmds"> </param>
			<param name="cCmds"> </param>
			<param name="pguidCmdGroup"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.ReplaceSubjectTextSpan(System.Int32,System.Int32,System.String)">
			<summary>Edits the text upon which IntelliSense operates.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iEndIndex">[in] Ending index of the subject text.</param>
			<param name="iStartIndex">[in] Starting index of the subject text.</param>
			<param name="pszText">[in] The subject text.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetContextCaretPos(System.Int32,System.Int32)">
			<summary>Sets the caret position relative to the context buffer.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iLine">[in] Length of the context buffer.</param>
			<param name="iIndex">[in] Indicates the caret position index.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetContextSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
			<summary>Sets the selection relative to the context buffer.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iEndIndex">Sets the selection relative to the context buffer.</param>
			<param name="iStartIndex">Sets the selection relative to the context buffer.</param>
			<param name="iStartLine">Sets the selection relative to the context buffer.</param>
			<param name="iEndLine">Sets the selection relative to the context buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetSubjectCaretPos(System.Int32)">
			<summary>Sets the caret position relative to the text upon which IntelliSense operates.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iIndex">[in] Indicates the caret position index.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetSubjectSelection(System.Int32,System.Int32)">
			<summary>Sets the selection relative to the text upon which IntelliSense operates.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="iAnchorIndex">[in] Start index number for the text span defining the subject text selection.</param>
			<param name="iEndIndex">[in] End index number for the text span defining the subject text selection.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
			<summary>Updates the completion status user interface (UI).</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwFlags">[in] Flags whose values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags"></see>.</param>
			<param name="pCompSet">[in] Pointer to the I<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
			<summary>Updates the smart tag window.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwFlags">[in] Flags containing tip window flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags"></see> interface.</param>
			<param name="pSmartTagWnd">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow"></see> interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
			<summary>Updates the tip window.</summary>
			<returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
			<param name="pTipWindow">[in] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow"></see> interface.</param>
			<param name="dwFlags">[in] Tip window options. For a list of dwFlags values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags"></see> interface.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip">
			<summary>Used to expose method tips.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Close(System.Int32)">
			<summary>Destroys the tip window and then deletes the tip.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="fDeleteThis">[in] BOOLEAN indicating that the window can be deleted.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Create(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow)">
			<summary>Creates the tool tip window.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pTipWnd">[in] A pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow"></see> interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
			<summary>Gets the size of the language tip window.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pSizeData">[in] Pointer to the size of the tip.</param>
			<param name="prcCtxBounds">[in] RECT struct containing the tip window coordinates.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost)">
			<summary>Initializes a language tooltip.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pHost">[in] A pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost"></see> interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.ScrollDown">
			<summary>Scrolls to next overload of the method.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.ScrollUp">
			<summary>Scrolls to the previous overload of the method.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Update(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
			<summary>Updates a language tooltip.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pTipWnd">[in] A pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow"></see> interface.</param>
			<param name="dwFlags">[in] Tip window flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags"></see> enumeration.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.UpdatePosition">
			<summary>Updates the tip position.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseOptions.GetCompletorSize(System.Int32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="uSize">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseOptions.SetCompletorSize(System.Int32)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="uSize">[in]</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2">
			<summary>Provides support for exception handlers in a language service.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2.QueryCommonLanguageBlock(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.UInt32,System.Int32@)">
			<summary>Determines if a specified location is contained within a specified type of exception handler block.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iCol">[in] Column to examine.</param>
			<param name="pfInBlock">[out] Returns non-zero if iLine and iCol is inside the specified common language block; otherwise, returns zero.</param>
			<param name="iLine">[in] Line to examine.</param>
			<param name="pBuffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> containing the text to examine.</param>
			<param name="dwFlag">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK"></see> enumeration specifying which common block to look for.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageLineIndent">
			<summary>Determines the number of "spaces" that should be added to the beginning of the specified line.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageLineIndent.GetIndentPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,System.Int32,System.Int32@)">
			<summary>Determines how many "spaces" to add at the start of a line.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pBaseLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer"></see> object.</param>
			<param name="pIndentPosition">[out] Returns the number of spaces to add to the beginning of the line.</param>
			<param name="BaseBufferLineIndex">[in] The index of the line that needs to be indented.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodDataEx">
			<summary>Provides access to the entire text shown for a method in an IntelliSense Parameter Info ToolTip.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow2">
			<summary>Provides additional methods for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow"></see> interface.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoUnit">
			<summary>Queries a linked undo set to determine if an undo action would be aborted.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoUnit.ActionWouldBeAborted(System.Int32@)">
			<summary>Queries each member of a linked undo set to determine if an undo action would be aborted.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbWouldBeAborted">[out] If 1 (TRUE), undo action would be aborted; if 0 (FALSE) undo action would not be aborted.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors">
			<summary>Used to manage a list of error messages associated with a particular project.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors.AddNewErrors(Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors)">
			<summary>Replaces the current list of errors with the specified list.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pErrors">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors"></see> object that contains a list of error objects to replace the current error list.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors.ClearAllErrors">
			<summary>Remove all errors from the list.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors.GetErrors(Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors@)">
			<summary>Retrieve a copy of the list of errors.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pErrors">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors"></see> object containing a list of all errors that have been accumulated in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors"></see> object.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetContextMenuInfo(System.Guid@,System.Int32@,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="guidID">[out]</param>
			<param name="pCmdTarget">[out]</param>
			<param name="nMenuID">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetContextStream(System.Int32@,System.Int32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="piPos">[out]</param>
			<param name="piLength">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetTimerInterval(System.Int32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="piTime">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetTipText(System.String@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbstrTipText">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.Dismiss">
			<summary>The window is being dismissed by the view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.GetContextStream(System.Int32@,System.Int32@)">
			<summary>Returns the context stream. </summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="piPos">[out]</param>
			<param name="piLength">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA[])">
			<summary>Returns the size preferences for a tip window.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pSizeData">[out] Size of the tip window. For values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA"></see>.</param>
			<param name="prcCtxBounds">[out] Coordinates of bounding rectangle.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.SetSmartTagData(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pSmartTagData">[in]</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator">
			<summary>Provides mapping services between two buffers.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.EnableReplication(System.UInt32,System.Int32)">
			<summary>Enables replication from primary to secondary buffer and replication from the secondary buffer to the primary.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="bcrd">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection"></see> enumeration describing the direction of replication to be enabled/disabled.</param>
			<param name="fEnable">[in] Nonzero (TRUE) to enable replication in the specified direction; otherwise, zero (FALSE) to disable replication.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.EnumSpans(Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans@)">
			<summary>Returns a list of span mappings controlled by the buffer coordinator object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppEnum">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans"></see> object that contains a list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping"></see> objects.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.GetMappingOfPrimaryPosition(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Maps the specified position in the primary buffer to the span in the secondary buffer.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ptsSecondary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is filled in with the line, offset pair in the secondary buffer for the corresponding primary position.</param>
			<param name="ptsPrimary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is filled in with the line, offset pair in the primary buffer for the specified position.</param>
			<param name="lPosition">[in] A character offset into the primary buffer from the beginning of the buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.GetPrimaryBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
			<summary>Returns the primary language buffer.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppBuffer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object that represents the primary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.GetSecondaryBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
			<summary>Returns the secondary language buffer.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppBuffer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object that represents the secondary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.MapPrimaryToSecondarySpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Maps the specified position in the primary buffer to a position in the secondary buffer.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="tsPrimary">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing a position in the primary buffer.</param>
			<param name="ptsSecondary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is filled in with the corresponding position in the secondary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.MapSecondaryToPrimarySpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Maps the specified position in the secondary buffer to a position in the primary buffer.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ptsPrimary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object that is filled in with the corresponding position in the primary buffer.</param>
			<param name="tsSecondary">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object describing a position in the secondary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.SetBufferMappingModes(System.UInt32,System.UInt32)">
			<summary>Establishes the mapping modes for both primary and secondary buffers.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="bcmmSecondary">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode"></see> enumeration that specifies the mapping modes for the secondary buffer.</param>
			<param name="bcmmPrimary">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode"></see> enumeration that specifies the mapping modes for the primary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.SetBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
			<summary>Establishes the primary and secondary buffers that are to be managed by the buffer coordinator object.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pSecondaryBuffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object representing the secondary buffer.</param>
			<param name="pPrimaryBuffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> object representing the primary buffer.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.SetSpanMappings(System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping[])">
			<summary>Establishes the list of mappings between the primary and secondary buffers.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="cSpans">[in] The number of mappings specified in the rgSpans array.</param>
			<param name="rgSpans">[in] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping"></see> structures each of which specify a single mapping between the primary and secondary buffers.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx">
			<summary>Adds methods to manage change markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> interface.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx.GetTrackChanges(System.Int32@)">
			<summary>Determines the change tracking status of the text buffer.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pfIsTracking">[in] If non-zero (TRUE), changes are being tracked in the text buffer; if zero (FALSE), changes are not being tracked.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx.SetTrackChangesSuppression(System.Int32)">
			<summary>Suppresses change marking in the text buffer.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fSupress">[out] Specify non-zero (TRUE) to suppress change tracking; otherwise specify zero (FALSE)</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2">
			<summary>Examines end-of-line (EOL) markers.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the length in characters of the end-of-line (EOL) marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A LINEDATAEX structure.</param>
			<param name="piEolType">[out] A uint valid member of EOLTYPE.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
			<summary>Returns a string containing the end-of-line (EOL) marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A LINEDATAEX structure.</param>
			<param name="pbstrEolText">[out] Returns a string containing the text of the EOL marker.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the EOLTYPE of the end-of-line (EOL) marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A LINEDATAEX structure.</param>
			<param name="piEolType">[out] A uint valid member of EOLTYPE.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2">
			<summary>Adds methods to examine end-of-line markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer"></see> interface.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the length in characters of the text line's end-of-line marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see>. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2"></see>.</param>
			<param name="Pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure containing the text line.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
			<summary>Returns a string containing the text line's end-of-line (EOL) marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure.</param>
			<param name="pbstrEolText">[out] A string containing the text of the end-of-line marker.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> of the text line's end-of-line marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see>. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2"></see>.</param>
			<param name="Pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarkerEx.GetClientData(System.UInt32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pdwData">[out] Returns the dwClient DWORD associated with the marker.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarkerEx.SetClientData(System.UInt32)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="dwData">[in] Changes the dwClient DWORD associated with the marker.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2">
			<summary>Adds methods to examine end-of-line markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> interface.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the length in characters of the text line's end-of-line marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure containing the text line.</param>
			<param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see>. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
			<summary>Returns a string containing the end-of-line (EOL) marker terminating the text line.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbstrEolText">[out] A string containing the text of the end-of-line (EOL) marker.</param>
			<param name="Pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure containing the text line.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> of the text line's end-of-line marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure containing the text line.</param>
			<param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see>. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2"></see>.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2">
			<summary>Provides additional methods to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager"></see> interface.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.AttemptToCheckOutBufferFromScc3(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.String,System.UInt32,System.Int32@,System.Int32@)">
			<summary>Attempts to check a file out of SCC.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbCheckoutSucceeded">[out] true if checkout succeeded.</param>
			<param name="pszFileName">[in] Name of the file to check out.</param>
			<param name="piStatusFlags">[out] For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult"></see>.</param>
			<param name="pBuffer">[in] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> for file.</param>
			<param name="dwQueryEditFlags"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetActiveView2(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
			<summary>Returns the active or previously active view.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
			<param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> interface.</param>
			<param name="pBuffer">[in] Pass null for pBuffer to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
			<param name="grfIncludeViewFrameType">[in] View frame type. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetBufferSccStatus3(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.String,System.Int32@,System.Int32@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pbCheckoutSucceeded">[out] true if checkout succeeded.</param>
			<param name="pszFileName">[in] File name of interest.</param>
			<param name="piStatusFlags">[out] For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult"></see>.</param>
			<param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetExpansionManager(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pExpansionManager">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetUserPreferences2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
			<summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about pLangPrefs, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2"></see>.</param>
			<param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about pFramePrefs, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2"></see>.</param>
			<param name="pColorPrefs">[in, out] Pointer to the font color preferences.</param>
			<param name="pViewPrefs">[out] Pointer to the view preferences. For more information about pViewPrefs, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.NavigateToLineAndColumn2(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
			<summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="iEndIndex">[in] Ending index for the selection to locate.</param>
			<param name="iStartIndex">[in] Starting index for the selection to locate.</param>
			<param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer"></see> interface.</param>
			<param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView"></see>.</param>
			<param name="iStartRow">[in] Starting line for the selection to locate.</param>
			<param name="grfIncludeViewFrameType">[in] View frame type. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE"></see></param>
			<param name="iEndRow">[in] Ending line for the selection to locate.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.NavigateToPosition2(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.UInt32)">
			<param name="iLen"> </param>
			<param name="pBuffer"> </param>
			<param name="guidDocViewType"> </param>
			<param name="iPos"> </param>
			<param name="grfIncludeViewFrameType"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.ResetColorableItems(System.Guid)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="guidLang">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.SetUserPreferences2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
			<summary>Sets user preferences.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2"></see>. Can be null if language preferences are not being set.</param>
			<param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2"></see>. Can be null if frame preferences are not being set.</param>
			<param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2"></see>.</param>
			<param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2"></see>. Can be null if view preferences are not being set.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2">
			<summary>Informs the user about changes n the text manager.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnRegisterMarkerType(System.Int32)">
			<summary>Fired when an external marker type is registered.</summary>
			<param name="iMarkerType">[in] External marker type that was registered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Fired when a view is registered.</summary>
			<param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> interface identifying the view that was registered. </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
			<summary>Fired when a view is unregistered.</summary>
			<param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see> interface identifying the view that was unregistered.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnUserPreferencesChanged2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
			<summary>Fired when the user's global preferences are changed.</summary>
			<param name="pLangPrefs">[in] Pointer to the relevant language as specified by the szFileType and guidLang members of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES"></see> structure. If this is non-null, preferences that affect a specific language's common settings have changed.</param>
			<param name="pFramePrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES"></see> structure, which allows the frame to control whether the view shows horizontal or vertical scroll bars. If this is non-NULL, preferences that specifically affect code windows have changed.</param>
			<param name="pColorPrefs">[in] Specifies color preferences. If non-null, the pguidColorService member of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES"></see> structure indicates which colorable item provider is associated with the pColorTable member. If this is non-null, preferences that affect the colors or font used by a text view have changed.</param>
			<param name="pViewPrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES"></see> structure. This structure provides the current settings for the view. If this is non-null, preferences that specifically affect text view behavior have changed.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientAdvanced">
			<summary>Extends the functionality available through the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient"></see> interface by providing additional callbacks. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientAdvanced.OnMarkerTextChanged(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
			<summary>Fires when the text on the same line as the marker has changed.</summary>
			<param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker"></see> interface for the marker.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientEx">
			<summary>Extends the functionality available through the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient"></see> interface by providing additional callbacks. </summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientEx.MarkerInvalidated(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
			<summary>Called when the text associated with a marker is deleted by a user action.</summary>
			<param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"></see> buffer.</param>
			<param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker"></see> interface for the marker.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientEx.OnHoverOverMarker(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pView">[in]</param>
			<param name="fShowUI">[in]</param>
			<param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker"></see> interface for the marker.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2">
			<summary>Adds methods to examine end-of-line markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage"></see> interface.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the length in characters of the text line's end-of-line marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure containing the text line.</param>
			<param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see>. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2"></see>.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
			<summary>Returns a string containing the end-of-line (EOL) marker terminating the text line.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure containing the text line.</param>
			<param name="pbstrEolText">[out] A string containing the text of the end-of-line (EOL) marker.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
			<summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> of the text line's end-of-line marker.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX"></see> structure containing the text line.</param>
			<param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see>. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE"></see> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2"></see>.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx">
			<summary>Adds functionality beyond <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"></see>.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.GetClusterRange(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
			<summary>Returns cluster range information.</summary>
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="piStartCol">[out]</param>
			<param name="picCharacter">[out]</param>
			<param name="iLine">[in]</param>
			<param name="iDisplayCol">[in]</param>
			<param name="piEndCol">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="rcSmartTag">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.GetWindowFrame(System.Object@)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="ppFrame">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.IsCompletorWindowActive">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.PersistOutliningState">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.SetHoverWaitTimer">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
			<returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>. If it fails, it returns an error code.</returns>
			<param name="dwFlags">[in]</param>
			<param name="pSmartTagWnd">[in]</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost">
			<summary>Core editor provided intellisense host for standard editor views.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.AfterCompletorCommit">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.BeforeCompletorCommit">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.Exec(System.Guid@,System.UInt32,System.UInt32,System.Object@,System.Object@)">
			<param name="pvaOut"> </param>
			<param name="pvaIn"> </param>
			<param name="nCmdID"> </param>
			<param name="pguidCmdGroup"> </param>
			<param name="nCmdexecopt"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
			<summary>The context buffer.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="ppCtxBuffer"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextCaretPos(System.Int32@,System.Int32@)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="piLine"> </param>
			<param name="piIndex"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextFocalPoint(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
			<summary>The "focal point" or position in the context buffer that should be considered the starting context point</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="piLen"> </param>
			<param name="pSpan"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextLocation(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32@)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="piTopX"> </param>
			<param name="iLen"> </param>
			<param name="fUseCaretPosition"> </param>
			<param name="iPos"> </param>
			<param name="prc"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextSelection(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pSelectionSpan"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetHostFlags(System.UInt32@)">
			<summary>Host flags (see IntellisenseHostFlags enum above)</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pdwFlags"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetHostWindow(System.IntPtr@)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="hwnd"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetServiceProvider(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="ppSP"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="rcSmartTag"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSubjectCaretPos(System.Int32@)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="piIndex"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSubjectSelection(System.Int32@,System.Int32@)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="piEndIndex"> </param>
			<param name="piAnchorIndex"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSubjectText(System.String@)">
			<summary>The text upon which Intellisense should operate.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.Returns E_NOTIMPL if GetHostFlags()includes IHF_NOSEPARATESUBJECT. The contents of the context buffer should be considered the subject text.</returns>
			<param name="pbstrSubjectText"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwFlags"> </param>
			<param name="cSpans"> </param>
			<param name="rgBaseSpans"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT[])">
			<param name="pCmdText"> </param>
			<param name="prgCmds"> </param>
			<param name="cCmds"> </param>
			<param name="pguidCmdGroup"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.ReplaceSubjectTextSpan(System.Int32,System.Int32,System.String)">
			<summary>Editing subject text. Return E_FAIL (or something) if text contains CR/LFs and flags contain IHF_SINGLELINESUBJECT.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="iEndIndex"> </param>
			<param name="iStartIndex"> </param>
			<param name="pszText"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetContextCaretPos(System.Int32,System.Int32)">
			<summary>Caret/selection setting relative to the context buffer. Any editing should be done via the buffer.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="iLine"> </param>
			<param name="iIndex"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetContextSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="iEndIndex"> </param>
			<param name="iStartIndex"> </param>
			<param name="iStartLine"> </param>
			<param name="iEndLine"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetSubjectCaretPos(System.Int32)">
			<summary>Caret/selection management for subject text. All return E_NOTIMPL if IHF_NOSEPARATESUBJECT is set in flags.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="iIndex"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetSubjectFromPrimaryBuffer(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
			<summary>Sets the span from the primary buffer.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pSpanInPrimary">[in] The primary buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> interface.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetSubjectSelection(System.Int32,System.Int32)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="iAnchorIndex"> </param>
			<param name="iEndIndex"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
			<summary>Intellisense UI handling.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwFlags"> </param>
			<param name="pCompSet"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="dwFlags"> </param>
			<param name="pSmartTagWnd"> </param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="pTipWindow"> </param>
			<param name="dwFlags"> </param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHostProvider">
			<summary>Implemented by a text view which provides IvsTextViewIntellisenseHost.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHostProvider.CreateIntellisenseHost(Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator,System.Guid@,System.IntPtr@)">
			<summary>Creates an IntelliSense host.</summary>
			<returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
			<param name="ppunkHost">[out, iid_is(riid)]</param>
			<param name="pBufferCoordinator">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator"></see> interface.</param>
			<param name="riid">[in] GUID of the test buffer coordinator for which the IntelliSense host is being created.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsWebFormDesignerSupport">
			<summary>Implemented by project to provide single-file web form support.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsWebFormDesignerSupport.AddReference(System.String)">
			<summary>Adds a reference to the specified page.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="pszReference">[in] A string containing the full path to the web page to add.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsWebFormDesignerSupport.GetCodeDomProvider(System.Object@)">
			<summary>Returns the language's code domain object model (DOM) provider.</summary>
			<returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK"></see>; otherwise, returns an error code.</returns>
			<param name="ppProvider">[out] Returns an object that represents the code DOM provider.</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2">
			<summary>Used to communicate user preferences with the text manager, views, and language services. View settings follow the text manager's settings unless a specific set of forced settings are specified when <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])"></see> is called.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fAutoListMembers">
			<summary>Determines whether a proposed list of members is produced on the fly.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fAutoListParams">
			<summary>Determines whether a proposed list of parameters is produced on the fly.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fCutCopyBlanks">
			<summary>Determines of blanks are included in cut/copy on a blank line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fDropdownBar">
			<summary>Determines whether language services support the dropdown or navigation bar.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fHideAdvancedAutoListMembers">
			<summary>Hide advanced members. This parameter is irrelevant if the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fAutoListMembers"></see> parameter is set to false.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fHotURLs">
			<summary>Allows for single-click URL navigation.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fInsertTabs">
			<summary>Determines whether the tab character or spaces are inserted for a tab.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fLineNumbers">
			<summary>Determines whether line numbers are shown in the selection margin.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fShowCompletion">
			<summary>Determines whether statement completion is set through the user interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fShowSmartIndent">
			<summary>Determines whether the smart indent option is set through the user interface.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fTwoWayTreeview">
			<summary>Determines whether the tree view is shown.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fVirtualSpace">
			<summary>Determines whether virtual space navigation and selection are allowed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fWordWrap">
			<summary>Determines whether word wrap occurs.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fWordWrapGlyphs">
			<summary>Specifies if a glyph should be shown to indicate a wrapped line.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.guidLang">
			<summary>Specifies the Language service GUID.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.IndentStyle">
			<summary>Specifies no indenting, block indenting, or smart indenting.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.szFileType">
			<summary>Specifies the file type.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.uIndentSize">
			<summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.uTabSize">
			<summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2">
			<summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGEPHEM">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGEPHEMSIDE">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGFACT">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGFACTSIDE">
			<summary> </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags2">
			<summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags2.mdtGlobal">
			<summary>Global (closed file capable) strict transaction.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2">
			<summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2.MB_DONT_DELETE_IF_ZEROLEN">
			<summary> </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2">
			<summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2.mcvRightClickCommand">
			<summary>Fired for a double click on the glyph (if one exists) fired for a right click on the widget margin.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2">
			<summary>Provides additional members to the MARKERTYPE enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.DEF_MARKER_COUNT_NEW">
			<summary>Represents the last MARKERTYPE2 member.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_BOOKMARK_DISABLED">
			<summary>Generic bookmark/tag.               Priority level: 200.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_BRACE_MATCHING">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_EXSTENCIL">
			<summary>Extensil support 790</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_EXSTENCIL_ENDMARKER">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_EXSTENCIL_SELECTED">
			<summary>Extensil support. Priority level: 790.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_REGION_COLLAPSED_NOGLYPH">
			<summary>A collapsible region is collapsed, with no glyph drawn.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_REGION_EXPANDED_NOGLYPH">
			<summary>A collapsible region is expanded, with no glyph drawn.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_EPHEMERAL">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_FACTOID">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_NONVIS">
			<summary>Invisible smart tag marker.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_VIS">
			<summary>Visible smart tag marker. Priority level: 810.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SPAN_MAPPING">
			<summary>Do not use. For internal use only.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_TRACK_NONSAVE">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_TRACK_PLACEHOLDER">
			<summary>Invisible placeholder used to allow concatenation of adjacent track changes markers.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_TRACK_SAVE">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_WARNING">
			<summary>Warning. Priority level: 780.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2">
			<summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_ROUNDEDBORDER">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_SMARTTAG">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_TRACK">
			<summary> </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx">
			<summary>Creates a new outline or hidden text region over the specified text span.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.dwBehavior">
			<summary>Determines whether a region is client- or editor-controlled.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.dwClient">
			<summary>Client-defined information that is used to uniquely identify the new region.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.dwState">
			<summary>Determines whether the new hidden region is expanded or collapsed. For more information see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.iType">
			<summary>Specifies whether a hidden (concealed) or outline (collapsible) region is created. This member is a permanent property of the region. For more information, see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.pBannerAttr">
			<summary>Specifies banner attributes (same as colorizer attributes).</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.pszBanner">
			<summary>Banner text displayed when the region is collapsed. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbClientControlled"></see> is specified for dwBehavior.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.tsHiddenText">
			<summary>Span of text to create the new region for. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see>.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping">
			<summary>Used to create a new span mapping.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping.tspSpans">
			<summary>Describes the two spans that are to be mapped to each other.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping.varUserData">
			<summary>Any data supplied by the user.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA">
			<summary>Holds data about smart tag size.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA.size">
			<summary>Specifies the size of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA"></see> struct.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX.ST_DEFAULTIMAGE">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX.ST_ERROR">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX.ST_REFACTOR">
			<summary> </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsRegisterFindScope">
			<summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)"></see> to return a reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope"></see> interface.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsTextImageUtilities">
			<summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)"></see> to return a reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities"></see> interface.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsTextSpanSet">
			<summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)"></see> method to return a reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet"></see> interface.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie">
			<summary>Used to represent a span of code embedded in a document.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie.CodeSpan">
			<summary>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object representing the span of embedded source code.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie.ulHTMLCookie">
			<summary>Identifies the line the code block starts on.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanPair">
			<summary>Used to express two corresponding spans in two separate buffers.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanPair.span1">
			<summary>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object representing the first span.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanPair.span2">
			<summary>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan"></see> object representing the second span.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2">
			<summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses2.TIP_S_NODEFAULTTIP">
			<summary> </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags2">
			<summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags2.UTW_EXPANDED">
			<summary> </summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags2.UTW_TIMER">
			<summary> </summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2">
			<summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES"></see> structure.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fAutoDelimiterHighlight">
			<summary>Determines whether automatic delimiter highlighting is allowed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fClientDragDropFeedback">
			<summary>Determines whether drag/drop feedback is enabled.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fDragDropEditing">
			<summary>Determines whether drag/drop editing is allowed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fDragDropMove">
			<summary>Determines whether drag/drop moves are allowed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fGoToAnchorAfterEscape">
			<summary>Determines whether the user is sent to an anchor after pressing the ESC key.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fOvertype">
			<summary>Determines whether insert or overtype is enabled. This value is not persisted.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fSelectionMargin">
			<summary>Determines whether the selection margin is displayed.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fTrackChanges">
			<summary>Determines whether track changes is enabled.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fUndoCaretMovements">
			<summary>Determines whether caret movements and text selections are included in undo list.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fVisibleWhitespace">
			<summary>Determines whether spaces and tabs are shown.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fWidgetMargin">
			<summary>Determines whether the widget margin is shown.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansion">
			<summary>Provides information about a code snippet.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.description">
			<summary>Provides the description for the code snippet.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.path">
			<summary>Provides the path to the code snippet.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.shortcut">
			<summary>Provides the shortcut name for the code snippet.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.title">
			<summary>Provides the full title of the code snippet.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.GetTokenPath(System.UInt32,System.String@)">
			<param name="__MIDL_0010">[in]</param>
			<param name="pbstrPath">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.InvokeInsertionUI(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String[],System.Int32,System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String)">
			<param name="iCountKinds">[in]</param>
			<param name="fIncludeNULLKind">[in]</param>
			<param name="guidLang">[in]</param>
			<param name="bstrCompletionChar">[in]</param>
			<param name="pView">[in]</param>
			<param name="bstrTypes">[in]</param>
			<param name="bstrKinds">[in]</param>
			<param name="fIncludeNULLType">[in]</param>
			<param name="pClient">[in]</param>
			<param name="iCountTypes">[in]</param>
			<param name="bstrPrefixText">[in]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.GetTokenPath(System.UInt32,System.String@)">
			<param name="__MIDL_0010">[in]</param>
			<param name="pbstrPath">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.InvokeInsertionUI(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String[],System.Int32,System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String)">
			<param name="iCountKinds">[in]</param>
			<param name="fIncludeNULLKind">[in]</param>
			<param name="guidLang">[in]</param>
			<param name="bstrCompletionChar">[in]</param>
			<param name="pView">[in]</param>
			<param name="bstrTypes">[in]</param>
			<param name="bstrKinds">[in]</param>
			<param name="fIncludeNULLType">[in]</param>
			<param name="pClient">[in]</param>
			<param name="iCountTypes">[in]</param>
			<param name="bstrPrefixText">[in]</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.VSFINDERROR2">
			<summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VSFINDERROR2.VSFE_NoErrorAnsiPattern">
			<summary>Expression found to be zero-extended ANSI characters.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindow">
			<summary>Controls interaction with a tip window.</summary>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass">
			<summary>Controls interaction with a tip window.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.Dismiss">
			<summary>The window is being dismissed by the view.</summary>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.GetContextStream(System.Int32@,System.Int32@)">
			<summary>Returns the context stream (the position and length of text in the buffer that should not be obscured by the tip window, but to which the content of the tip is related).</summary>
			<param name="piPos">[out]</param>
			<param name="piLength">[out]</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA[])">
			<summary>Returns the size preferences for a tip window.</summary>
			<param name="pSizeData">[out] Size of the tip window. For values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA"></see>.</param>
			<param name="prcCtxBounds">[out] Coordinates of bounding rectangle.</param>
		</member>
		<member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.SetSmartTagData(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData)">
			<summary>Establishes smart tag data.</summary>
			<param name="pSmartTagData">[in]</param>
		</member>
		<member name="T:Microsoft.VisualStudio.TextManager.Interop.VSTFF2">
			<summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF"></see> enumeration.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VSTFF2.VSTFF_KEEPANSI">
			<summary>If text appears to be ANSI, don't convert it.</summary>
		</member>
		<member name="F:Microsoft.VisualStudio.TextManager.Interop.VSTFF2.VSTFF_NOUTF8_NOSIG">
			<summary>Turn off auto-detection of UTF8 without sig.</summary>
		</member>
	</members>
</doc>